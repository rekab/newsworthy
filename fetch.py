import bs4
import functools
import json
import openai
import os
import pprint
import random


api_key = os.environ.get('API_KEY')
client = openai.OpenAI(api_key=api_key)

MAX_TOKENS = 3000

PROMPT_BASE = """I'm going to write a list of news headlines, and you need to score it according to the following criteria:

POLITICAL: Scale 0.0 to 1.0: Major political developments, such as a world leader's death, significant political upheaval, or high-profile trials of political figures.
GLOBAL: Scale 0.0 to 1.0: Significant global events, like breakthroughs in international agreements, major acts of terrorism, or significant natural disasters affecting large populations.
SCIENCE AND TECHNOLOGY: Scale 0.0 to 1.0: Groundbreaking scientific discoveries or technological advancements with far-reaching implications.
ECONOMY: Scale 0.0 to 1.0: Major economic shifts, like stock market crashes, significant mergers, or global economic policy changes.
OVERALL: Scale 0.0 to 1.0

Reply as a JSON dictionary, keyed by category with array values, consisting of a floating point score and a short (<300 character) string explaining why. ONLY reply using JSON. DO NOT include anything other than JSON.

The headlines are:

"""


def get_news():
#    try:
	result = subprocess.run(
			["curl", "https://news.google.com/home?hl=en-US&gl=US&ceid=US:en"],
			capture_output=True, text=True, check=True)
	return result.stdout
#    except subprocess.CalledProcessError as e:
#        print("An error occurred while fetching the headlines.")
#        print(e)
#        return None


def read_old_news():
    with open('curl-news-snapshot.2024-01-07.html', 'r') as f:
        return f.read()


def extract_headlines(html_content):
    soup = bs4.BeautifulSoup(html_content, 'html.parser')

    articles = []
    for link in soup.find_all('a'):
        href = link.get('href')
        if href is not None and href.startswith('./articles/') and link.text != '':
            articles.append(link.text)

    return articles


def request_chatgpt(prompt, max_tokens=200):
    """
    Sends a request to ChatGPT API using the openai package.

    :param prompt: The prompt to send to ChatGPT.
    :param max_tokens: The maximum number of tokens to generate.
    :return: The text generated by ChatGPT.
    """

    response = client.completions.create(
        model="gpt-3.5-turbo-instruct",
        prompt=prompt,
        max_tokens=max_tokens,
        temperature=0.7)

    return response.choices[0].text.strip()


def main():
    headlines = '\n'.join(extract_headlines(read_old_news()))
    prompt = PROMPT_BASE + headlines
    dialog = request_chatgpt(prompt, MAX_TOKENS)
    print(dialog)
    #pprint.pprint(dialog)
    #for headline in extract_headlines(read_old_news()):
    #    print(headline)


if __name__=='__main__':
    main()
